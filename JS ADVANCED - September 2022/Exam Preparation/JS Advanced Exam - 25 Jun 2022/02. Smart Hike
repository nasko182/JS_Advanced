class SmartHike{
    constructor (username){
        this.username=username;
        this.goals={};
        this.listOfHikes=[];
        this.resources =100;
    }

    addGoal (peak, altitude){
        if(this.goals.hasOwnProperty(peak)){
            return `${peak} has already been added to your goals`;
        }
        this.goals[peak]=altitude;
        return `You have successfully added a new goal - ${peak}`
    }

    hike (peak, time, difficultyLevel){
        if(!this.goals.hasOwnProperty(peak)){
            throw new Error(`${peak} is not in your current goals`)
        }
        if(this.resources==0){
            throw new Error("You don't have enough resources to start the hike")
        }

        let diff = this.resources-time*10;
        if(diff<0){
           return "You don't have enough resources to complete the hike"
        }

        this.resources = diff;
        let hike = {peak,time,difficultyLevel};
        this.listOfHikes.push(hike);
        return `You hiked ${peak} peak for ${time} hours and you have ${this.resources}% resources left`
    }

    rest (time){
        this.resources = this.resources+time*10;

        if(this.resources>=100){
            this.resources=100;
            return `Your resources are fully recharged. Time for hiking!`
        }
        else{
            return `You have rested for ${time} hours and gained ${time*10}% resources`
        }
    }

    showRecord (criteria){
        if(this.listOfHikes.length==0){
            return `${this.username} has not done any hiking yet`
        }
        if(criteria==`all`){
            let text = "All hiking records:\n";
            this.listOfHikes.forEach((h)=>{
                text+= `${this.username} hiked ${h.peak} for ${h.time} hours\n`
            })
            return text.trimEnd(`\n`);
        }
        let hikes = this.listOfHikes.filter(h=>h.difficultyLevel==criteria);
        if(hikes.length==0){
            return `${this.username} has not done any ${criteria} hiking yet`
        }
        let sorted = hikes.sort((a,b)=>{a.time - b.time})
        let hike = sorted.shift();
         return `${this.username}'s best ${criteria} hike is ${hike.peak} peak, for ${hike.time} hours`
        
        
    }
}
